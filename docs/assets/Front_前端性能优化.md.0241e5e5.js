import{_ as s,o as a,c as n,O as l}from"./chunks/framework.0acdd879.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"doc","outline":"deep"},"headers":[],"relativePath":"front/前端性能优化.md","filePath":"front/前端性能优化.md"}'),o={name:"Front/前端性能优化.md"},e=l(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h1 id="前端性能优化" tabindex="-1">前端性能优化 <a class="header-anchor" href="#前端性能优化" aria-label="Permalink to &quot;前端性能优化&quot;">​</a></h1><h2 id="前端性能指标" tabindex="-1">前端性能指标 <a class="header-anchor" href="#前端性能指标" aria-label="Permalink to &quot;前端性能指标&quot;">​</a></h2><h3 id="_1-rail性能模型" tabindex="-1">1.RAIL性能模型 <a class="header-anchor" href="#_1-rail性能模型" aria-label="Permalink to &quot;1.RAIL性能模型&quot;">​</a></h3><p><code>Response、Animation、Idle、Load</code></p><ul><li><p>FCP(First Content Paint)</p><p>即首次内容绘制（文字、图片、非白色Canvas、svg等）所需要的时间。</p></li><li><p>LCP(Largest Content Paint)</p><p>即充满可视区域的内容加载所需要的时间。</p></li><li><p>FID(First Input Delay)</p><p>首次输入延迟，即用户第一次与页面交互到浏览器实际能够响应的时间。</p></li><li><p>TTI(Time to Interactive)</p><p>持续可交互时间，即网页第一次完全到达可交互状态的时间点。</p></li><li><p>TBT(Total Block Time)</p><p>总阻塞时间，即<code>FID</code>到<code>TTI</code>之间的时间。</p></li><li><p>CLS(Cumulative Layout Shift)</p><p>累计布局位移，<code>CLS</code>会测量在页面整个生命周期中发生的每个意外的布局移位的所有单独布局移位分数的总和，他是一种保证页面的视觉稳定性从而提升用户体验的指标方案。</p></li></ul><h3 id="_2-web-vitals" tabindex="-1">2. Web-Vitals <a class="header-anchor" href="#_2-web-vitals" aria-label="Permalink to &quot;2. Web-Vitals&quot;">​</a></h3><p>​ 缩减为: <code>LCP</code>、<code>FID</code>、<code>CLS</code></p><h2 id="一、页面渲染篇🎆" tabindex="-1">一、页面渲染篇🎆 <a class="header-anchor" href="#一、页面渲染篇🎆" aria-label="Permalink to &quot;一、页面渲染篇🎆&quot;">​</a></h2><h3 id="_1-减少页面重绘与回流" tabindex="-1">1. 减少页面重绘与回流 <a class="header-anchor" href="#_1-减少页面重绘与回流" aria-label="Permalink to &quot;1. 减少页面重绘与回流&quot;">​</a></h3><ul><li>✨减少css属性简写，如：用<code>flex-grow</code>, <code>flex-shrink</code>, <code>flex-basis</code>代替<code>flex</code>，因为css简写将所有值初始化为<code>initial</code></li><li>✨通过修改<code>className</code>批量修改元素样式</li><li>✨复杂动画元素定位设置为<code>fixed/absolute</code>，避免引起回流</li><li>✨避免使用<code>table</code>布局，因为一旦回流会导致<code>table</code>所有元素回流</li><li>✨创建多个DOM节点，使用<code>DocumentFragment</code>一次创建</li><li>✨CSS3硬件加速，使用<code>transform</code>/<code>opacity</code>/<code>filter</code>等动画不触发回流重绘</li><li>✨尽量定义高度或最小高度，否则页面内容动态加载的时候，会出现页面元素的晃动或位置的变化，引起回流</li><li>✨大量修改元素样式的时候，可以先设置<code>display:none</code>隐藏，修改完后再设置为<code>display:block</code></li></ul><h3 id="_2-图片压缩、分割" tabindex="-1">2. 图片压缩、分割 <a class="header-anchor" href="#_2-图片压缩、分割" aria-label="Permalink to &quot;2. 图片压缩、分割&quot;">​</a></h3><ul><li>🎈压缩图片大小（tinyPng）</li><li>🎈图片分割，将一张图片分割成多分，最后使用CSS拼接</li><li>🎈雪碧图（精灵图🧝‍），将多张图片合成一张图片，使用CSS<code>background-position</code>定位图片并且展示。</li></ul><h3 id="_3-字体压缩" tabindex="-1">3. 字体压缩 <a class="header-anchor" href="#_3-字体压缩" aria-label="Permalink to &quot;3. 字体压缩&quot;">​</a></h3><p>​ <code>font-spider🕷</code> 提取所需的字体加载（按需加载）</p><h3 id="_4-懒加载-预加载" tabindex="-1">4. 懒加载/预加载 <a class="header-anchor" href="#_4-懒加载-预加载" aria-label="Permalink to &quot;4. 懒加载/预加载&quot;">​</a></h3><ul><li><p>🎉懒加载：只有当图片到达视窗再进行加载</p></li><li><p>🎉预加载：Resource Hints(资源预加载)包括预连接、资源与获取、资源预渲染等</p><blockquote><p>实现方式：<a href="https://dayswithvenki.top/posts/lazyload_preload" target="_blank" rel="noreferrer">懒加载与预加载</a></p></blockquote></li></ul><h2 id="二、打包优化篇🎇" tabindex="-1">二、打包优化篇🎇 <a class="header-anchor" href="#二、打包优化篇🎇" aria-label="Permalink to &quot;二、打包优化篇🎇&quot;">​</a></h2><pre><code>#### 1. resolve
</code></pre><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">extensions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">alias</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">@</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><ul><li><p>alias</p><ul><li>配置别名</li><li>每个模块的路径都需要进行解析，解析是比较耗时的，使用别名的时候，打包工具会直接按照别名对应的路径映射过去，提高了打包速度</li></ul></li><li><p>extensions</p><p>当引入方式为: <code>import(&#39;@/data&#39;)</code>，<code>vite</code>会自动根据<code>extensions</code>里的顺序依次查找后缀，本示例中会优先找<code>data.ts</code>，若找不到则找<code>data.js</code>若还是找不到就报错。因此，<code>extensions</code>要尽量按照出现频率优先排序，并且不要把项目中不存在的后缀引入<code>extensions</code>中，引入的时候可以考虑带上后缀。</p></li></ul><h3 id="_2-webpack缩小loader范围" tabindex="-1">2. Webpack缩小loader范围 <a class="header-anchor" href="#_2-webpack缩小loader范围" aria-label="Permalink to &quot;2. Webpack缩小loader范围&quot;">​</a></h3><p>​ 配置<code>loader</code>的时候，通过<code>include</code>和<code>except</code>缩小<code>loader</code>的执行范围。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">svg</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">loader</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">svg-sprite-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">include</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src/icons</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_3-chunks分包打包" tabindex="-1">3.chunks分包打包 <a class="header-anchor" href="#_3-chunks分包打包" aria-label="Permalink to &quot;3.chunks分包打包&quot;">​</a></h3><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.ts</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 自定义分包</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">rollupOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// key为自定义的名称，[]中插件同步package.json的名称或者src目录下的相对路径</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">manualChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F07178;">vue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pinia</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-i18n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F07178;">echarts</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">echarts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#F07178;">lodash</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">loadash</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h6 id="分包的好处" tabindex="-1">分包的好处： <a class="header-anchor" href="#分包的好处" aria-label="Permalink to &quot;分包的好处：&quot;">​</a></h6><p>​ 当我们访问一个页面的时候，如果不进行分包，我们将发送一次HTTP请求获取整个页面的包，此时一个包大小可能很大，请求所需要的时间可能很长；当我们分包构建的时候，只有当需要时，才会对对应的包进行动态请求，这样，能够避免发起请求以及使用额外的带宽。</p><p>​ 不仅如此，分包构建后不同的包会根据包的内容计算<code>hash</code>值，如果某个包内容没有变化，他的<code>hash</code>值也不会改变，这样浏览器就能够直接从<code>缓存</code>中获取所需的包，从而节省了网络请求时间和带宽。而对于改变了内容的部分，由于其hash值已经发生了变化，浏览器无法从缓存中获取，需要重新发起网络请求获取最新的资源。这样既保证了网站的实时性，又减少了不必要的网络请求，提高了页面的加载速度和用户体验。</p><h3 id="_4-tree-shaking" tabindex="-1">4. Tree Shaking <a class="header-anchor" href="#_4-tree-shaking" aria-label="Permalink to &quot;4. Tree Shaking&quot;">​</a></h3><p>​ <code>Tree Shaking</code> 是指在打包时，将未被引用的模块代码剔除掉，从而减小最终打包后的文件大小。<code>Tree Shaking</code> 依赖于 ES6 的模块系统和静态语法分析，可以在编译阶段分析出哪些模块没有被使用，然后在打包时将这些模块移除。<code>Tree Shaking</code> 通过去掉没有使用的代码，从而减小了最终打包文件的体积，提高了应用的加载速度。</p><blockquote><p>Tree Shaking 与 按需导入的区别：</p><p>​ <code>按需导入</code>是指只加载当前需要的模块，而不是将整个模块全部加载进来。按需导入通常用于优化页面加载速度。例如，在一个大型应用中，可能存在某些功能只在特定情况下才会被使用，这时候可以使用按需导入，只在需要使用时加载对应的模块，减小了应用的启动时间和加载时间。</p><p>​ 按需引入相当于选择需要引入的模块或者代码片段，而Tree Shaking 是通过静态分析代码中的依赖关系，自动地将代码中没有使用的部分删除掉，以减小打包后的文件体积。</p></blockquote><h2 id="三、网络请求篇🎈" tabindex="-1">三、网络请求篇🎈 <a class="header-anchor" href="#三、网络请求篇🎈" aria-label="Permalink to &quot;三、网络请求篇🎈&quot;">​</a></h2>`,33),p=[e];function t(c,r,i,D,y,F){return a(),n("div",null,p)}const h=s(o,[["render",t]]);export{C as __pageData,h as default};
