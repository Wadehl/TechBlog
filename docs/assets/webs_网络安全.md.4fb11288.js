import{_ as e,o as a,c as l,R as o}from"./chunks/framework.3bbe0c8b.js";const b=JSON.parse('{"title":"网络安全","description":"","frontmatter":{},"headers":[],"relativePath":"webs/网络安全.md","filePath":"webs/网络安全.md"}'),i={name:"webs/网络安全.md"},t=o('<h1 id="网络安全" tabindex="-1">网络安全 <a class="header-anchor" href="#网络安全" aria-label="Permalink to &quot;网络安全&quot;">​</a></h1><h2 id="三要素" tabindex="-1">三要素 <a class="header-anchor" href="#三要素" aria-label="Permalink to &quot;三要素&quot;">​</a></h2><ol><li>机密性：攻击者无法获取通信内容</li><li>完整性：攻击者对内容进行篡改时能被发现</li><li>身份验证：攻击者无法伪装成通信双方的任意一方与另一方通信</li></ol><h2 id="加密方式" tabindex="-1">加密方式 <a class="header-anchor" href="#加密方式" aria-label="Permalink to &quot;加密方式&quot;">​</a></h2><ol><li>对称加密：加密、解密使用相同的密钥</li><li>非对称加密：加密、解密采用不同的秘钥（公钥和私钥），公钥加密只能私钥解密，私钥加密只能公钥解密</li></ol><h2 id="密码散列函数-哈希函数" tabindex="-1">密码散列函数（哈希函数） <a class="header-anchor" href="#密码散列函数-哈希函数" aria-label="Permalink to &quot;密码散列函数（哈希函数）&quot;">​</a></h2><ul><li>输入：任意长度的内容</li><li>输出：固定长度的哈希值</li><li>性质：找到两个不同的输入使之经过密码散列函数后有相同的哈希值，在计算上是不可能的</li></ul><h2 id="机密性" tabindex="-1">机密性 <a class="header-anchor" href="#机密性" aria-label="Permalink to &quot;机密性&quot;">​</a></h2><ul><li>加密需要加密算法和秘密钥信息</li><li>网络传输是明文的，不安全</li></ul><h2 id="完整性与身份验证" tabindex="-1">完整性与身份验证 <a class="header-anchor" href="#完整性与身份验证" aria-label="Permalink to &quot;完整性与身份验证&quot;">​</a></h2><ul><li>相互关联</li></ul><h2 id="如何实现完整性" tabindex="-1">如何实现完整性？ <a class="header-anchor" href="#如何实现完整性" aria-label="Permalink to &quot;如何实现完整性？&quot;">​</a></h2><ul><li><p>明文<code>m</code>，哈希函数<code>H</code>，以及秘钥<code>s</code></p></li><li><p>计算<code>H(m+s)</code>获取哈希值<code>h</code></p></li><li><p>将<code>m</code>和<code>h</code>组合成新的信息<code>m+h</code></p></li><li><p>接收方拆分<code>m+h</code>，重新计算<code>H(m+s)</code>得<code>h&#39;</code>,对比<code>h&#39;</code>与<code>h</code></p></li></ul><h2 id="如何实现身份验证" tabindex="-1">如何实现身份验证 <a class="header-anchor" href="#如何实现身份验证" aria-label="Permalink to &quot;如何实现身份验证&quot;">​</a></h2><ul><li>签名：用于鉴别身份与防止伪造</li><li>数字签名：对明文内容的哈希值使用私钥解密，验证者s使用公钥验证</li></ul>',15),d=[t];function c(r,h,s,n,u,_){return a(),l("div",null,d)}const p=e(i,[["render",c]]);export{b as __pageData,p as default};
